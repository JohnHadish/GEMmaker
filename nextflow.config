/**
 * ===========================
 * GEMmaker Configuration File
 * ===========================
 *
 * This file provides the configuration settings for the GEMmaker workflow.
 */
manifest {
  mainScript = "main.nf"
  defaultBranch = "master"
  nextflowVersion = ">=19.01"
}




params {
  project {
    name = "CORG RNA-Seq example"
    machine_name = "CORG_vs_samples"
    description = "This is the default project settings for GEMmaker. Use these setting to properly describe your project so that others can understand the purpose of your analysis."
  }

  input {
    // The unique name for the genome reference assembly. It must not contain
    // spaces or special characters, only alphanumeric characters and underscores.
    reference_name = "CORG"

    // Gene quantification tool inputs. Note, if you are only using one alignment
    // tool, i.e. kallisto, you do not need references for the other alignment tools


    // If you are following the example setup, you do not need to change these
    // parameters.
    reference_dir = "input/references/"
    input_data_dir = "input/"
    remote_sample_list = "SRA_IDs.txt"
    local_sample_files = "*_{1,2}.fastq"

    hisat2 {
      enable = false
      index_files = "*.ht2"
      gtf_file = "*.transcripts.gtf"
    }
    salmon {
      enable = false
      index_dir = "*.transcripts.Salmon.indexed"
    }
    kallisto {
      enable = true
      index_file = "*.transcripts.Kallisto.indexed"
    }
  }




  output {

    // Universal output parameters
    dir = "output"
    sample_dir = { "${params.output.dir}/${sample_id}" }
    publish_mode = "link"
    publish_sra = false
    publish_downloaded_fastq = false
    publish_tpm = true
    publish_raw = true
    multiqc = true
    create_gem = true

    // Salmon and Kallisto specific parameters
    publish_gene_abundance = false

    // Hisat2 specific parameters
    publish_stringtie_gtf_and_ga = false
    publish_trimmed_fastq = false
    publish_bam = false
    publish_sam = false
    publish_fpkm = true
  }

  execution {
    queue_size = 100
  }

  software {
    trimmomatic {
      clip_path = "${baseDir}/files/fasta_adapter.txt"
      MINLEN = "0.7"
      quality = ""
      SLIDINGWINDOW = "4:15"
      LEADING = "3"
      TRAILING = "6"
    }
  }
}



report {
  enabled = true
  file = "${params.output.dir}/reports/report.html"
}



timeline {
  enabled = true
  file = "${params.output.dir}/reports/timeline.html"
}



trace {
  enabled = true
  fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
  file = "${params.output.dir}/reports/trace.txt"
  raw = true
}



docker {
  fixOwnership = true
  runOptions = "--init"
  sudo = false
}



singularity {
  autoMounts = true
  cacheDir = "work-singularity"
}



process {
  container = "systemsgenetics/gemmaker:1.0"
  errorStrategy = "retry"
  maxRetries = 3

  withLabel:rate_limit {
    maxForks = 1
  }
  withLabel:retry {
    errorStrategy = { task.attempt < 3 ? "retry" : "ignore" }
  }

  withLabel:gemmaker {
    container = "systemsgenetics/gemmaker:1.0-merged"
    time = "72h"
  }
  withLabel:fastqc {
    container = "systemsgenetics/fastqc:0.11.7"
    time = "24h"
  }
  withLabel:hisat2 {
    container = "systemsgenetics/hisat2:2.1.0"
    time = "48h"
  }
  withLabel:kallisto {
    container = "systemsgenetics/kallisto:0.45.0"
    time = "24h"
  }
  withLabel:multiqc {
    container = "systemsgenetics/multiqc:1.7"
  }
  withLabel:python3 {
    container = "systemsgenetics/python:3.5.1"
    time = "1h"
  }
  withLabel:salmon {
    container = "systemsgenetics/salmon:0.12.0"
    time = "24h"
  }
  withLabel:samtools {
    container = "systemsgenetics/samtools:1.9"
    time = "48h"
  }
  withLabel:sratoolkit {
    container = "systemsgenetics/sratoolkit:2.9.6"
    time = "48h"
  }
  withLabel:stringtie {
    container = "systemsgenetics/stringtie:1.3.4d"
    time = "48h"
  }
  withLabel:trimmomatic {
    container = "systemsgenetics/trimmomatic:0.38"
    time = "72h"
  }
}



profiles {
  //
  // The standard profile uses the local executor, in which processes are simply
  // launched as normal processes on the local machine. By default the local
  // executor uses the number of CPU cores to limit how many processes are run
  // in parallel.
  //
  standard {
    process.executor = "local"
  }

  // A profile for testing on the Travis.CI testing platform.
  travis {
    docker.enabled = true
    process {
      withLabel:retry {
        errorStrategy = "terminate"
      }
    }
  }

  //
  // The testing profile is used to override the execution params and force the
  // workflow to terminate immediately if any process fails, which is useful for
  // debugging purposes.
  //
  testing {
    process {
      withLabel:retry {
        errorStrategy = "terminate"
      }
    }
  }

  //
  // The k8s profile provides basic execution settings for running the workflow
  // on a Kubernetes cluster.
  //
  k8s {
    process {
      executor = "k8s"
      cpus = 1
      memory = 1.GB

      withLabel:multithreaded {
        cpus = 8
        memory = 8.GB
      }
    }
    executor {
      queueSize = "${params.execution.queue_size}"
    }
  }

  //
  // Clemson's Palmetto cluster uses the PBS scheduler. Here we provide
  // an example for execution of this workflow on Palmetto with some
  // defaults for all steps of the workflow.
  //
  pbs {
    process {
      executor = "pbspro"
      time = "8h"
      cpus = 2
      memory = 2.GB

      withLabel:multithreaded {
        cpus = 8
        memory = 8.GB
      }
    }
    executor {
      queueSize = "${params.execution.queue_size}"
    }
  }

  //
  // WSU's Kamiak cluster uses the SLURM scheduler. Here we provide
  // an example for execution of this workflow on Kamiak with some
  // defaults for all steps of the workflow.
  //
  slurm {
    process {
      executor = "slurm"
      queue = "ficklin"
      time = "24h"
      cpus = 1

      withLabel:multithreaded {
        cpus = 1
      }
    }
    executor {
      queueSize = "${params.execution.queue_size}"
    }
  }

  //
  // In lieu of using Docker or Singularity, software dependencies
  // can be provided by Environment Modules (or a compatible equivalent
  // such as Lmod). Module names may vary from system to system; the
  // following profiles are specific to Palmetto and Kamiak respectively,
  // but you will likely need to create your own profile that uses the
  // correct module names for your cluster.
  //
  palmetto_modules {
    withLabel:gemmaker {
      module = "fastQC"
      module = "hisat2"
      module = "anaconda3"
      module = "samtools"
      module = "sratoolkit"
      module = "stringtie"
      module = "trimmomatic"
    }
    withLabel:fastqc {
      module = "fastQC"
    }
    withLabel:hisat2 {
      module = "hisat2"
    }
    withLabel:python3 {
      module = "anaconda3"
    }
    withLabel:samtools {
      module = "samtools"
    }
    withLabel:sratoolkit {
      module = "sratoolkit"
    }
    withLabel:stringtie {
      module = "stringtie"
    }
    withLabel:trimmomatic {
      module = "trimmomatic"
    }
  }

  kamiak_modules {
    withLabel:gemmaker {
      module = "fastQC"
      module = "hisat2"
      module = "python3"
      module = "samtools"
      module = "sratoolkit"
      module = "stringtie"
      module = "trimmomatic"
    }
    withLabel:fastqc {
      module = "fastQC"
    }
    withLabel:hisat2 {
      module = "hisat2"
    }
    withLabel:python3 {
      module = "python3"
    }
    withLabel:samtools {
      module = "samtools"
    }
    withLabel:sratoolkit {
      module = "sratoolkit"
    }
    withLabel:stringtie {
      module = "stringtie"
    }
    withLabel:trimmomatic {
      module = "trimmomatic"
    }
  }
}
