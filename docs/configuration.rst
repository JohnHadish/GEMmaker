.. _configuration:

Workflow Configuration
----------------------

Like all nextflow workflows, GEMmaker has a ``nextflow.config`` file which allows it to be customized. The config file has two main sections:

- ``params``: Parameters for input files, output files, and software.
- ``profiles``: Example profiles for running on different environments such as an HPC system.

The following sections give detailed information on each parameter in ``nextflow.config``. Refer to the `Nextflow documentation <https://www.nextflow.io/docs/latest/config.html#config-profiles>`__ for more information on the language of the config file.

Input
~~~~~

remote_list_path
================

The path to the list of SRA Run IDs to be downloaded from NCBI. This must be a text file with one SRR/DRR/ERR ID per line. No blank lines are allowed. If no remote files are to be downloaded, set this parameter to ``"none"``.

Default:

.. code:: bash

  remote_list_path = "${PWD}/examples/RemoteRunExample/SRA_IDs.txt"

Example of ``SRA_IDs.txt`` format:

.. code:: bash

  SRR360147
  SRR493289
  SRR1696865
  SRR2086505
  SRR2086497
  SRR1184187
  SRR1184188

local_samples_path
==================

The glob that retrieves locally stored fastq files. An example of a proper glob to retrieve files can be seen below as the default. This glob pattern will find all files that have an ending of ``_1.fastq`` or ``_2.fastq`` in the subdirectories of the folder ``Sample``. If no local files are to be used, set this parameter to ``"none"``.

Default:

.. code:: bash

  local_samples_path = "${PWD}/examples/LocalRunExample/Sample*/\*_{1,2}.fastq"

reference_path
==============

The path to the directory containing the genome reference files. The reference genome is provided to this workflow via a set of files in a single directory. The required reference files will vary based on which alignment you use (Hisat2, Salmon, and Kallisto).

For Hisat2:

1. Hisat2 index files created from the reference genome with ``hisat2-build``.
2. A GTF file containing the genes annotated from the reference genome.

To generate the hisat2 files, download the reference genome and run this command (this example uses the Arabidopsis genome from TAIR):

.. code:: bash

  hisat2-build -f TAIR10_Araport11.fna TAIR10_Araport11 | tee > hisat2-build.log

Example of Hisat2 reference directory:

.. code:: bash

  reference/
    TAIR10_Araport11.1.ht2
    TAIR10_Araport11.2.ht2
    TAIR10_Araport11.3.ht2
    TAIR10_Araport11.4.ht2
    TAIR10_Araport11.5.ht2
    TAIR10_Araport11.6.ht2
    TAIR10_Araport11.7.ht2
    TAIR10_Araport11.8.ht2
    TAIR10_Araport11.gtf
    TAIR10_Araport11.fna

Example of Salmon reference directory:

.. code:: bash

  reference/
    TAIR10_Araport11.transcripts.Salmon.indexed/

Example of Kallisto reference directory:

.. code:: bash

  reference/
    TAIR10_Araport11.transcripts.Kallisto.indexed

All files for the reference genome must begin with the same file prefix. For example, if the prefix is ``TAIR10_Araport11`` then every file listed above (for hisat2) should be prefixed with ``TAIR10_Araport11``.

Default:

.. code:: bash

  reference_path = "${PWD}/examples/reference/"

reference_prefix
================

The prefix (used by ``hisat2-build``) for the genome reference files. All files in the reference directory must have this prefix.

Default:

.. code:: bash

  reference_prefix = "CORG"

Output
~~~~~~

dir
===

All results and reports generated by nextflow are stored in a single output directory to make it easier to transfer results to long-term storage such as iRODS.

Default:

.. code:: bash

  dir = "${PWD}/output"

sample_dir
==========

Results generated by this workflow are stored in directories that are named by sample ID. If the fastq file is not associated with a sample ID (for example, with local files), then the "sample ID" is simply the basename of the fastq file.

The default naming pattern is to make one directory for each sample ID. However, if you have a large amount of samples (1000s or more), it may be problematic to have so many sample directories in one place. To deal with this issue you can use a pattern that organizes the results into a multi-level directory tree. For example:

.. code:: bash

  sample_dir = { "${params.output.dir}/${sample_id[0..2]}/${sample_id[3..4]}/${sample_id.drop(5)}/${sample_id}" }

This pattern will organize sample directories into three levels of subdirectories. For example, the output of the sample ``SRX0123456`` would be put in the directory ``SRX/12/34/56/SRX123456/``. You can modify the above patterns for your needs.

Default:

.. code:: bash

  sample_dir = { "${params.output.dir}/${sample_id}" }

.. note::
  The brackets in this example denote a `closure`, a language construct in nextflow which allows you to create more dynamic expressions using variables and even other config params. In this case, ``sample_id`` is a variable that will be defined for each process that uses this parameter, so that you can organize the sample directories by sample ID.

publish_mode
============

Mode for publishing output files.

Options are the standard nextflow stage options:

- ``"link"``: Recommended, creates a hardlink for each published file.
- ``"rellink"``: Use when hardlink is not possible.
- ``"symlink"``: Use when hardlink is not possible (currently not compatible with iRODS).
- ``"copy"``: Not recommended, copies each published file to ``publshDir`` after it is created in the pipeline. This option may slow the pipeline significantly.

Default:

.. code:: bash

  publish_mode = "link"

publish_sra
===========

Parameter that determines whether to save the downloaded SRA files from NCBI. Default is ``true``. Set to ``false`` if space is going to be an issue.

publish_downloaded_fastq
========================

Parameter that determines whether to save the downloaded fastq files from NCBI. Default is ``true``. Set to ``false`` if space is going to be an issue.

publish_trimmed_fastq
=====================

Parameter that determines whether to save the trimmed fastq files. Default is ``true``. Set to ``false`` if space is going to be an issue.

publish_bam
===========

Parameter that determines whether to save the BAM files. Default is ``true``. Set to ``false`` if space is going to be an issue.

publish_raw
===========

Parameter that determines whether to create raw files at the end. Default is ``true``.

publish_fpkm
============

Parameter that determines whether to create FPKM files at the end. Default is ``true``.

publish_tpm
===========

Parameter that determines whether to create TPM files at the end. Default is ``true``.

Execution
~~~~~~~~~

queue_size
==========

Maximum number of processes to execute at once.

Default:

.. code:: bash

  queue_size = 100

Software
~~~~~~~~

sra_download
============

Which tool to use for downloading remote SRA files.

- ``0``: aspera
- ``1``: sratoolkit

Default:

.. code:: bash

  sra_download = 0

alignment
=========

Which tool to use for gene alignment. If hisat2 is chosen, processes ``samtools_sort``, ``samtools_index`` and ``stringtie`` will also be done. All processes will end with a gene abundance file. Aligns reads to the reference genome.

- ``0``: hisat2
- ``1``: kallisto
- ``2``: salmon

Default:

.. code:: bash

  alignment = 0

Profiles
~~~~~~~~

The config file provides several profiles for running GEMmaker in different environments. Each profile defines various config settings that override whatever defaults provided by the rest of the config file. For example, the ``testing`` profile overrides the default ``errorStrategy`` to terminate the entire workflow if any error occurs, rather than ignore failed samples. Other profiles such as ``pbs`` and ``slurm`` provide example configurations for running GEMmaker with a HPC scheduler. These profiles are intended to be modified according to your needs, as every HPC system is different. The ``profiles`` section of the config file contains detailed descriptions of each example profile. Again, please refer to the `Nextflow documentation <https://www.nextflow.io/docs/latest/config.html#config-profiles>`__ for more information on how to use the config file as well as what executors are available.
