.. _configuration:

Workflow Configuration
----------------------

GEMmaker has a ``nextflow.config`` file which allows it to be customized. The config file has three main sections:

- ``project``:  Parameters providing background information about the GEMmaker run to be performed.
- ``params``: Parameters for input files, output files, and software.
- ``profiles``: Example profiles for running on different environments such as an HPC system.

The following sections give detailed information on each parameter in ``nextflow.config``. Refer to the `Nextflow documentation <https://www.nextflow.io/docs/latest/config.html#config-profiles>`__ for more information on the language of the config file.

Project
~~~~~~~

name
====
A human readable name for the analysis that you will perform. It is best to keep this short and brief.

machine_name
============
A machine readable name for the analysis that you will perform. It is mean to be short. It should only have alphanumeric characters (0-9, a-z, A-Z) and underscores. This parameter will be used to name the final GEM file.

description
===========
In order to help others understand the purpose for the GEMmaker run, you should include a brief description providing enough details to help your collegues who may look at your GEMmaker run in the future.


Input
~~~~~

remote_list_path
================

The path to the list of SRA Run IDs to be downloaded from NCBI. This must be a text file with one SRR/DRR/ERR ID per line. No blank lines are allowed. If no remote files are to be downloaded, set this parameter to ``"none"``.

Default:

.. code:: bash

  remote_list_path = "${baseDir}/examples/RemoteRunExample/SRA_IDs.txt"

Example of ``SRA_IDs.txt`` format:

.. code:: bash

  SRR360147
  SRR493289
  SRR1696865
  SRR2086505
  SRR2086497
  SRR1184187
  SRR1184188

local_samples_path
==================

The glob that retrieves locally stored fastq files. An example of a proper glob to retrieve paired FASTQ files can be seen below and is set as the default. This glob pattern will find all files that have an ending of ``_1.fastq`` or ``_2.fastq`` in the subdirectories of the folder ``Sample`` and group those that have the same file prefix into a paired-set. If no local files are to be used, set this parameter to ``"none"``.

Default:

.. code:: bash

  local_samples_path = "${baseDir}/examples/LocalRunExample/Sample*/*_{1,2}.fastq"

reference_name
==============
The unique name for the genome reference assembly. It must not contain spaces or special characters, only alphanumeric characters (0-9, a-z, A-Z) and underscores. This name will be used when creating intermediate files that you may want to keep, such as BAM files.


hisat2
======

If you want to use the Hisat2 pipeline for alignment and quantification of reads, set `enable` to `true`.   If Hisat2 is enabled, the trimmomatic, samtools and stringtie processes will be enabled as well.

The `index_dir` should be the full path to the directory where hisat2 indexes are located. These indexes should have been built with from the reference genome using the ``hisat2-build`` program.

The `index_prefix` parameter should be set to the prefix used when creating the hisat2 index files.

The `gtf_file` parameter should be teh full path to a GTF file containing the genes annotated from the reference genome.


.. code:: bash

  hisat2 {
    enable = true
    index_dir = "${baseDir}/examples/reference/CORG.transcripts.Hisat2.indexed/"
    index_prefix = "CORG"
    gtf_file = "${baseDir}/examples/reference/CORG.gtf"
  }


salmon
======

If you want to use Salmon for quantification of reads, set `enable` to `true`.

The `index_dir` should be the full path to the directory where Salmon indexes are located. These indexes should have been built with from the reference genome using the ``salmon index`` program.


.. code:: bash

  salmon {
    enable = true
    index_dir = "${baseDir}/examples/reference/CORG.transcripts.Salmon.indexed"
  }


kallisto
========

If you want to use Kallisto for quantification of reads, set `enable` to `true`.

The `index_file` should be the full path where the Kallisto index file is located. This index file should have been built with from the reference genome using the ``kallisto index`` program.


.. code:: bash

  kallisto {
    enable = true
    index_file = "${baseDir}/examples/reference/CORG.transcripts.Kallisto.indexed"
  }

.. note::

  You can enable a single quantification tool. You cannot currently enable Hisat2, Salmon or Kallisto at the same time.

Output
~~~~~~
GEMmaker is intended to be a program that is customizeable to the users needs. **This being said, the average user will NOT need to change any of the default output parameters**. We have set the default parameters for output to automatically cleanup unused files generated by the workflow, and output the final files to a directory titled "output"

The following sections are intended to give the user access to intermediary files that they may need for other programs.

.. code:: bash

  output {

    // Universal output parameters
    dir = "output"
    sample_dir = { "${params.output.dir}/${sample_id}" }
    publish_mode = "link"
    publish_sra = false
    publish_downloaded_fastq = false
    publish_tpm = true
    publish_raw = true
    multiqc = true
    create_gem = true

    // Salmon and Kallisto specific parameters
    publish_gene_abundance = false

    // Hisat2 specific parameters
    publish_stringtie_gtf_and_ga = false
    publish_trimmed_fastq = false
    publish_bam = false
    publish_sam = false
    publish_fpkm = true
  }


Output Parameters Descriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**Default Parameters Typically fine, skip this section unless you need intermediary files**

dir
===

All results and reports generated by nextflow are stored in a single output directory to make it easier to transfer results to long-term storage such as iRODS.

Default:

.. code:: bash

  dir = "output"

sample_dir
==========

Results generated by this workflow are stored in directories that are named by sample ID. If the fastq file is not associated with a sample ID (for example, with local files), then the "sample ID" is simply the basename of the fastq file.

The default naming pattern is to make one directory for each sample ID. However, if you have a large amount of samples (1000s or more), it may be problematic to have so many sample directories in one place. To deal with this issue you can use a pattern that organizes the results into a multi-level directory tree. For example:

.. code:: bash

  sample_dir = { "${params.output.dir}/${sample_id[0..2]}/${sample_id[3..4]}/${sample_id.drop(5)}/${sample_id}" }

This pattern will organize sample directories into three levels of subdirectories. For example, the output of the sample ``SRX0123456`` would be put in the directory ``SRX/12/34/56/SRX123456/``. You can modify the above patterns for your needs.

Default:

.. code:: bash

  sample_dir = { "${params.output.dir}/${sample_id}" }

.. note::
  The brackets in this example denote a `closure`, a language construct in nextflow which allows you to create more dynamic expressions using variables and even other config params. In this case, ``sample_id`` is a variable that will be defined for each process that uses this parameter, so that you can organize the sample directories by sample ID.

publish_mode
============

Mode for publishing output files.

Options are the standard nextflow stage options:

- ``"link"``: Recommended, creates a hardlink for each published file.
- ``"rellink"``: Use when hardlink is not possible.
- ``"symlink"``: Use when hardlink is not possible (currently not compatible with iRODS).
- ``"copy"``: Not recommended, copies each published file to ``publshDir`` after it is created in the pipeline. This option may slow the pipeline significantly.

Default:

.. code:: bash

  publish_mode = "link"


Intermediary Files
==================
The remaining options in the output parameter determine which intermediary and final output files should be published. By default, all intermediary files are set to false, while final output files are set to true. The following table is a summary of each file:

.. list-table:: Title
   :widths: 25 25 25 50
   :header-rows: 1

   * - parameter
     - default publish setting
     - Alignment Software Used In Hisat2 = H Salmon = S Kallisto = K
     - Brief Description
   * - publish_sra
     - false
     - HSK
     - Downloaded Sequence Read Archive (sra) file from NCBI (not human readable)
   * - publish_downloaded_fastq
     - false
     - HSK
     - Extracted sra file in fastq format (human readable)
   * - publish_tpm
     - true
     - HSK
     - Transcripts Per Kilobase Million, Final Output Count file option `Extended Descripion <https://www.rna-seqblog.com/rpkm-fpkm-and-tpm-clearly-explained/>`__
   * - publish_raw
     - true
     - HSK
     - Final Output Count file option, the raw count of each gene. Compare to FPKM and TPM
   * - multiqc
     - true
     - HSK
     - A final report that is generated that tells you about the GEMmaker run
   * - create_gem
     - true
     - HSK
     - Combines Final Count Files (FPKM, TPM, raw) into their respective GEM
   * - publish_gene_abundance
     - false
     - SK
     - File Generated by Kallisto or Salmon before it is cleaned into Final Count Files
   * - publish_stringtie_gtf_and_ga
     - false
     - H
     - File Generated by Hisat2 before it is cleaned into Final Count Files
   * - publish_trimmed_fastq
     - false
     - H
     - Fastq files after they have been trimmed
   * - publish_bam
     - false
     - H
     - binary alignment file (not human readable) of genes aligned to reference genome
   * - publish_sam
     - false
     - H
     - alignment file (human readable) of genes aligned to reference genome
   * - publish_fpkm
     - true
     - H
     - Fragments Per Kilobase Million, Final Output Count file option `Extended Descripion <https://www.rna-seqblog.com/rpkm-fpkm-and-tpm-clearly-explained/>`__



Execution
~~~~~~~~~

queue_size
==========

Maximum number of processes to execute at once.

Default:

.. code:: bash

  queue_size = 100

Software
~~~~~~~~

alignment
=========

Which tool to use for gene alignment. If hisat2 is chosen, processes ``samtools_sort``, ``samtools_index`` and ``stringtie`` will also be done. All processes will end with a gene abundance file. Aligns reads to the reference genome.

- ``0``: hisat2
- ``1``: kallisto
- ``2``: salmon

Default:

.. code:: bash

  alignment = 0

Profiles
~~~~~~~~

The config file provides several profiles for running GEMmaker in different environments. Each profile defines various config settings that override whatever defaults provided by the rest of the config file. For example, the ``testing`` profile overrides the default ``errorStrategy`` to terminate the entire workflow if any error occurs, rather than ignore failed samples. Other profiles such as ``pbs`` and ``slurm`` provide example configurations for running GEMmaker with a HPC scheduler. These profiles are intended to be modified according to your needs, as every HPC system is different. The ``profiles`` section of the config file contains detailed descriptions of each example profile. Again, please refer to the `Nextflow documentation <https://www.nextflow.io/docs/latest/config.html#config-profiles>`__ for more information on how to use the config file as well as what executors are available.
